1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
独立的handler函数能：(1)根据不同中断类型push或not push error code，保持一致的trapframe结构，便于访问；(2) 明确当前中断类型，如果共享handler，则不知道是哪个中断，除非将push更多信息。

2. Did you have to do anything to make the user/softint program behave correctly? 
The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? 
What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler(which is interrupt vector 14)?
(1) 参考手册，i386允许的软中断指令是INT n(> 31), INTO(interrupt 4), BOUND(interrupt 5)，修改成int 4或int 5可以触发合法的软中断。
(2) trap_init()中定义的IDT page fault中断的dpl权限为0，因访问权限不够（软中断需要dpl=3）而触发trap 13。
(3) 正常触发的缺页异常会将va存在cr2寄存器，如果允许int 14触发，handler读cr2不会读到这次的va，会读到错误的va。

3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? 
How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
(1) 因为SETGATE时给int 3设置的dpl(描述符特权级)。
(2) 设置dpl = 3可触发break point exception，dpl = 0则权限不够触发generate protection fault。
 
4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
重点是定义IDT中不同中断的dpl(描述符特权级别)，限定了用户使用int指令能触发的interrupt/trap类型，更安全。